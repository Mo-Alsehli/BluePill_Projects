
STM32F103C6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f88  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080010b8  080010b8  000110b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010dc  080010dc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080010dc  080010dc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010dc  080010dc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010dc  080010dc  000110dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010e0  080010e0  000110e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080010e4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000004  080010e8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080010e8  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c0a  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012bf  00000000  00000000  00027c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000160e  00000000  00000000  00028ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000350  00000000  00000000  0002a508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002b8  00000000  00000000  0002a858  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003559  00000000  00000000  0002ab10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003da1  00000000  00000000  0002e069  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c861  00000000  00000000  00031e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003e66b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b14  00000000  00000000  0003e6e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080010a0 	.word	0x080010a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080010a0 	.word	0x080010a0

08000170 <EEPROM_Init>:
 *      Author: Mohamed Magdi
 */

#include "EEPROM_I2C_Slave.h"

void EEPROM_Init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	// PB6: I2C1_SCL
	// PB7: I2C1_SDA

	I2C_Config_t I2C1Cfg;

	I2C1Cfg.generalCall = I2C_General_Call_EN;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C1Cfg.I2CACKControl = I2C_ACK_EN;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C1Cfg.clkSpeed = I2C_SCLK_SM_100K;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_Init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C1Cfg.mode = I2C_Mode_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C1Cfg.PSlaveEventCallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C1Cfg.stretchMode = I2C_Stretch_Mode_EN;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_SetPins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <EEPROM_Init+0x3c>)
 8000192:	f000 fc9f 	bl	8000ad4 <MCAL_I2C_GPIO_SetPins>
	MCAL_I2C_Init(I2C1, &I2C1Cfg);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 fb8e 	bl	80008bc <MCAL_I2C_Init>
}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_Write_NBytes>:
uint8_t EEPROM_Write_NBytes(uint32_t memoryAdd, uint8_t* bytes, uint8_t dataLen){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint8_t buffer[256];

	buffer[0] = (uint8_t)(memoryAdd >> 8);
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(memoryAdd);
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for(i = 2; i < (dataLen + 2); i++){
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <EEPROM_Write_NBytes+0x66>
		buffer[i] = bytes[i-2];
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for(i = 2; i < (dataLen + 2); i++){
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <EEPROM_Write_NBytes+0x42>
	}

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, (dataLen + 2), WITH_STOP, START);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	4619      	mov	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <EEPROM_Write_NBytes+0xa0>)
 800023e:	f000 fc93 	bl	8000b68 <MCAL_I2C_Master_TX>

	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <EEPROM_Read_Byte>:
uint8_t EEPROM_Read_Byte(uint32_t address, uint8_t* data, uint8_t dataLen){
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];
	buffer[0] = (uint8_t)(address >> 8);
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(address);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, buffer, 2, WITHOUT_STOP, START);
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <EEPROM_Read_Byte+0x54>)
 8000282:	f000 fc71 	bl	8000b68 <MCAL_I2C_Master_TX>

	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_Address, (uint8_t*)data, dataLen, WITH_STOP, REPEATED_START);
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <EEPROM_Read_Byte+0x54>)
 8000298:	f000 fcb8 	bl	8000c0c <MCAL_I2C_Master_RX>

	return 0;
 800029c:	2300      	movs	r3, #0
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40005400 	.word	0x40005400

080002ac <EXTI0_IRQHandler>:
 * ===================================================================
 * 							ISR Functions
 * ===================================================================
 */

void EXTI0_IRQHandler(void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[0]();
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI0_IRQHandler+0x20>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400
 80002cc:	20000030 	.word	0x20000030

080002d0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[1]();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI1_IRQHandler+0x20>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4798      	blx	r3
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	20000030 	.word	0x20000030

080002f4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[2]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI2_IRQHandler+0x20>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4798      	blx	r3
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	20000030 	.word	0x20000030

08000318 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[3]();
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI3_IRQHandler+0x20>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4798      	blx	r3
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	20000030 	.word	0x20000030

0800033c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[4]();
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI4_IRQHandler+0x20>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	4798      	blx	r3
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	20000030 	.word	0x20000030

08000360 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5){
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	2b00      	cmp	r3, #0
 800036e:	d008      	beq.n	8000382 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= 1 << 5;
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a22      	ldr	r2, [pc, #136]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[5]();
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 6){
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800038a:	2b00      	cmp	r3, #0
 800038c:	d008      	beq.n	80003a0 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= 1 << 6;
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000398:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[6]();
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 7){
 80003a0:	4b17      	ldr	r3, [pc, #92]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d008      	beq.n	80003be <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= 1 << 7;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b6:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[7]();
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 8){
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= 1 << 8;
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d4:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[8]();
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003d8:	6a1b      	ldr	r3, [r3, #32]
 80003da:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 9){
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= 1 << 9;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[9]();
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f8:	4798      	blx	r3
	}
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010400 	.word	0x40010400
 8000404:	20000030 	.word	0x20000030

08000408 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10){
 800040c:	4b35      	ldr	r3, [pc, #212]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= 1 << 10;
 8000418:	4b32      	ldr	r3, [pc, #200]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a31      	ldr	r2, [pc, #196]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 800041e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000422:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8000424:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <EXTI15_10_IRQHandler+0xe0>)
 8000426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000428:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 10){
 800042a:	4b2e      	ldr	r3, [pc, #184]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000432:	2b00      	cmp	r3, #0
 8000434:	d008      	beq.n	8000448 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= 1 << 10;
 8000436:	4b2b      	ldr	r3, [pc, #172]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a2a      	ldr	r2, [pc, #168]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 800043c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000440:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8000442:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <EXTI15_10_IRQHandler+0xe0>)
 8000444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000446:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 11){
 8000448:	4b26      	ldr	r3, [pc, #152]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= 1 << 11;
 8000454:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a22      	ldr	r2, [pc, #136]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 800045a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800045e:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[11]();
 8000460:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <EXTI15_10_IRQHandler+0xe0>)
 8000462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000464:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 12){
 8000466:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= 1 << 12;
 8000472:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a1b      	ldr	r2, [pc, #108]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 8000478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800047c:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[12]();
 800047e:	4b1a      	ldr	r3, [pc, #104]	; (80004e8 <EXTI15_10_IRQHandler+0xe0>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 13){
 8000484:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= 1 << 13;
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 8000496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800049a:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[13]();
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <EXTI15_10_IRQHandler+0xe0>)
 800049e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a0:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 14){
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= 1 << 14;
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 80004b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b8:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[14]();
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <EXTI15_10_IRQHandler+0xe0>)
 80004bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004be:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 15){
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d008      	beq.n	80004de <EXTI15_10_IRQHandler+0xd6>
		EXTI->PR |= 1 << 15;
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <EXTI15_10_IRQHandler+0xdc>)
 80004d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004d6:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[15]();
 80004d8:	4b03      	ldr	r3, [pc, #12]	; (80004e8 <EXTI15_10_IRQHandler+0xe0>)
 80004da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004dc:	4798      	blx	r3
	}
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40010400 	.word	0x40010400
 80004e8:	20000030 	.word	0x20000030

080004ec <getCRLHPinPos>:
// Includes
// ------------------------------------------------------------------

#include "GPIO_Driver.h"

int getCRLHPinPos(uint16_t pinNum){
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	80fb      	strh	r3, [r7, #6]
	switch(pinNum){
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	2b80      	cmp	r3, #128	; 0x80
 80004fa:	d042      	beq.n	8000582 <getCRLHPinPos+0x96>
 80004fc:	2b80      	cmp	r3, #128	; 0x80
 80004fe:	dc11      	bgt.n	8000524 <getCRLHPinPos+0x38>
 8000500:	2b08      	cmp	r3, #8
 8000502:	d036      	beq.n	8000572 <getCRLHPinPos+0x86>
 8000504:	2b08      	cmp	r3, #8
 8000506:	dc06      	bgt.n	8000516 <getCRLHPinPos+0x2a>
 8000508:	2b02      	cmp	r3, #2
 800050a:	d02e      	beq.n	800056a <getCRLHPinPos+0x7e>
 800050c:	2b04      	cmp	r3, #4
 800050e:	d02e      	beq.n	800056e <getCRLHPinPos+0x82>
 8000510:	2b01      	cmp	r3, #1
 8000512:	d028      	beq.n	8000566 <getCRLHPinPos+0x7a>
 8000514:	e047      	b.n	80005a6 <getCRLHPinPos+0xba>
 8000516:	2b20      	cmp	r3, #32
 8000518:	d02f      	beq.n	800057a <getCRLHPinPos+0x8e>
 800051a:	2b40      	cmp	r3, #64	; 0x40
 800051c:	d02f      	beq.n	800057e <getCRLHPinPos+0x92>
 800051e:	2b10      	cmp	r3, #16
 8000520:	d029      	beq.n	8000576 <getCRLHPinPos+0x8a>
 8000522:	e040      	b.n	80005a6 <getCRLHPinPos+0xba>
 8000524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000528:	d033      	beq.n	8000592 <getCRLHPinPos+0xa6>
 800052a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800052e:	dc09      	bgt.n	8000544 <getCRLHPinPos+0x58>
 8000530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000534:	d029      	beq.n	800058a <getCRLHPinPos+0x9e>
 8000536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800053a:	d028      	beq.n	800058e <getCRLHPinPos+0xa2>
 800053c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000540:	d021      	beq.n	8000586 <getCRLHPinPos+0x9a>
 8000542:	e030      	b.n	80005a6 <getCRLHPinPos+0xba>
 8000544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000548:	d027      	beq.n	800059a <getCRLHPinPos+0xae>
 800054a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800054e:	dc03      	bgt.n	8000558 <getCRLHPinPos+0x6c>
 8000550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000554:	d01f      	beq.n	8000596 <getCRLHPinPos+0xaa>
 8000556:	e026      	b.n	80005a6 <getCRLHPinPos+0xba>
 8000558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800055c:	d01f      	beq.n	800059e <getCRLHPinPos+0xb2>
 800055e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000562:	d01e      	beq.n	80005a2 <getCRLHPinPos+0xb6>
 8000564:	e01f      	b.n	80005a6 <getCRLHPinPos+0xba>
	case (GPIO_PIN_0):
											return 0;
 8000566:	2300      	movs	r3, #0
 8000568:	e01e      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_1):
											return 4;
 800056a:	2304      	movs	r3, #4
 800056c:	e01c      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_2):
											return 8;
 800056e:	2308      	movs	r3, #8
 8000570:	e01a      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_3):
											return 12;
 8000572:	230c      	movs	r3, #12
 8000574:	e018      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_4):
											return 16;
 8000576:	2310      	movs	r3, #16
 8000578:	e016      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_5):
											return 20;
 800057a:	2314      	movs	r3, #20
 800057c:	e014      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_6):
											return 24;
 800057e:	2318      	movs	r3, #24
 8000580:	e012      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_7):
											return 28;
 8000582:	231c      	movs	r3, #28
 8000584:	e010      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_8):
											return 0;
 8000586:	2300      	movs	r3, #0
 8000588:	e00e      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_9):
											return 4;
 800058a:	2304      	movs	r3, #4
 800058c:	e00c      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_10):
											return 8;
 800058e:	2308      	movs	r3, #8
 8000590:	e00a      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_11):
											return 12;
 8000592:	230c      	movs	r3, #12
 8000594:	e008      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_12):
											return 16;
 8000596:	2310      	movs	r3, #16
 8000598:	e006      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_13):
											return 20;
 800059a:	2314      	movs	r3, #20
 800059c:	e004      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_14):
											return 24;
 800059e:	2318      	movs	r3, #24
 80005a0:	e002      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_15):
											return 28;
 80005a2:	231c      	movs	r3, #28
 80005a4:	e000      	b.n	80005a8 <getCRLHPinPos+0xbc>
	break;
	}

	return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <MCAL_GPIO_Init>:
 * @retval 		- none
 * Note 		- STM32F103C6 MCU has GPIO A, B, C, D, E modules but LQFP48 package
 * 				  has only GPIO A, B, PART of C/D exported as external From the MCU.
 */

void MCAL_GPIO_Init(GPIO_TYPE_DEF* gpiox, GPIO_PinConfig_t* pinConfig){
 80005b2:	b590      	push	{r4, r7, lr}
 80005b4:	b085      	sub	sp, #20
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL), Configures pins from 0 >>> 7.
	// Port configuration register low (GPIOx_CRH), Configures pins from 8 >>> 15.

	volatile uint32_t* configReg = NULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
	uint8_t pin_CNF_MODE = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]

	// Configure if We are in CRL or CRH.
	configReg = (pinConfig->GPIO_PinNumber > GPIO_PIN_7) ? (&gpiox->CRH) : (&gpiox->CRL);
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	2b80      	cmp	r3, #128	; 0x80
 80005ca:	d902      	bls.n	80005d2 <MCAL_GPIO_Init+0x20>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3304      	adds	r3, #4
 80005d0:	e000      	b.n	80005d4 <MCAL_GPIO_Init+0x22>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60bb      	str	r3, [r7, #8]

	// Clear CNFy[1:0] MODEy[1:0];
	(*configReg) &= ~(0xf << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff86 	bl	80004ec <getCRLHPinPos>
 80005e0:	4602      	mov	r2, r0
 80005e2:	230f      	movs	r3, #15
 80005e4:	4093      	lsls	r3, r2
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	401a      	ands	r2, r3
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	601a      	str	r2, [r3, #0]

	// If PIN Is OUPUT.
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD){
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	789b      	ldrb	r3, [r3, #2]
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d00b      	beq.n	8000612 <MCAL_GPIO_Init+0x60>
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	2b05      	cmp	r3, #5
 8000600:	d007      	beq.n	8000612 <MCAL_GPIO_Init+0x60>
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	2b06      	cmp	r3, #6
 8000608:	d003      	beq.n	8000612 <MCAL_GPIO_Init+0x60>
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	789b      	ldrb	r3, [r3, #2]
 800060e:	2b07      	cmp	r3, #7
 8000610:	d10e      	bne.n	8000630 <MCAL_GPIO_Init+0x7e>

		pin_CNF_MODE = ((pinConfig->GPIO_MODE - 4) << 2) | (pinConfig->GPIO_OUTPUT_SPEED & 0x0f);
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	789b      	ldrb	r3, [r3, #2]
 8000616:	3b04      	subs	r3, #4
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	b25a      	sxtb	r2, r3
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	78db      	ldrb	r3, [r3, #3]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	b25b      	sxtb	r3, r3
 8000628:	4313      	orrs	r3, r2
 800062a:	b25b      	sxtb	r3, r3
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	e039      	b.n	80006a4 <MCAL_GPIO_Init+0xf2>
	}
	// If PIN Is INPUT.
	else {	// MODE = 00: Input mode (reset state).
		if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinConfig->GPIO_MODE == GPIO_MODE_ANALOG){
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	789b      	ldrb	r3, [r3, #2]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d003      	beq.n	8000640 <MCAL_GPIO_Init+0x8e>
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	789b      	ldrb	r3, [r3, #2]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10c      	bne.n	800065a <MCAL_GPIO_Init+0xa8>
			pin_CNF_MODE |= ((pinConfig->GPIO_MODE << 2)) & 0x0f;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	b25b      	sxtb	r3, r3
 8000648:	f003 030f 	and.w	r3, r3, #15
 800064c:	b25a      	sxtb	r2, r3
 800064e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000652:	4313      	orrs	r3, r2
 8000654:	b25b      	sxtb	r3, r3
 8000656:	73fb      	strb	r3, [r7, #15]
 8000658:	e024      	b.n	80006a4 <MCAL_GPIO_Init+0xf2>

		} else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	789b      	ldrb	r3, [r3, #2]
 800065e:	2b08      	cmp	r3, #8
 8000660:	d104      	bne.n	800066c <MCAL_GPIO_Init+0xba>
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_FLO << 2)) & 0x0f;
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	e01b      	b.n	80006a4 <MCAL_GPIO_Init+0xf2>
		}else{
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_PU << 2)) & 0x0f;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	f043 0308 	orr.w	r3, r3, #8
 8000672:	73fb      	strb	r3, [r7, #15]

			// Table 20. Port bit configuration table PxODR configure if pull-up or down.
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	2b02      	cmp	r3, #2
 800067a:	d107      	bne.n	800068c <MCAL_GPIO_Init+0xda>
				gpiox->ODR |= pinConfig->GPIO_PinNumber;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	8812      	ldrh	r2, [r2, #0]
 8000684:	431a      	orrs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	e00b      	b.n	80006a4 <MCAL_GPIO_Init+0xf2>
			}else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD) {
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	789b      	ldrb	r3, [r3, #2]
 8000690:	2b03      	cmp	r3, #3
 8000692:	d107      	bne.n	80006a4 <MCAL_GPIO_Init+0xf2>
				gpiox->ODR &= ~(pinConfig->GPIO_PinNumber);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	8812      	ldrh	r2, [r2, #0]
 800069c:	43d2      	mvns	r2, r2
 800069e:	401a      	ands	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	60da      	str	r2, [r3, #12]
			}
		}


	}
	*configReg |= (pin_CNF_MODE << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 80006a4:	7bfc      	ldrb	r4, [r7, #15]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff1e 	bl	80004ec <getCRLHPinPos>
 80006b0:	4603      	mov	r3, r0
 80006b2:	fa04 f203 	lsl.w	r2, r4, r3
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	431a      	orrs	r2, r3
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	601a      	str	r2, [r3, #0]

}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd90      	pop	{r4, r7, pc}

080006c8 <I2C_GenerateStart>:
// APIs
// ------------------------------------------------------------------


/**************************** GENERIC APIs ********************************/
void I2C_GenerateStart(I2C_TYPE_DEF* I2Cx, Functional_State newState, Start_Condition startState){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
 80006d4:	4613      	mov	r3, r2
 80006d6:	70bb      	strb	r3, [r7, #2]
	// Check if the start is repeated start.
	if(startState != REPEATED_START){
 80006d8:	78bb      	ldrb	r3, [r7, #2]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d007      	beq.n	80006ee <I2C_GenerateStart+0x26>
		// Check if the Bus is idle.
		while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 80006de:	bf00      	nop
 80006e0:	2100      	movs	r1, #0
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 f832 	bl	800074c <I2C_GetFlagStatus>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1f8      	bne.n	80006e0 <I2C_GenerateStart+0x18>
	}

	if(newState != DISABLE){
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d006      	beq.n	8000702 <I2C_GenerateStart+0x3a>
		// Generate Start Condition.
		I2Cx ->CR1 |= I2C_CR1_START;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	601a      	str	r2, [r3, #0]
	}else {
		// Disable Start Condition Generation.
		I2Cx ->CR1 &= ~(I2C_CR1_START);
	}
}
 8000700:	e005      	b.n	800070e <I2C_GenerateStart+0x46>
		I2Cx ->CR1 &= ~(I2C_CR1_START);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	601a      	str	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <I2C_GenerateStop>:


void I2C_GenerateStop(I2C_TYPE_DEF* I2Cx, Functional_State stopState){
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]
	if(stopState  != DISABLE){
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <I2C_GenerateStop+0x20>
		// Generate a stop condition.
		I2Cx -> CR1 |= I2C_CR1_STOP;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
	}else{
		// Disable Stop Generation.
		I2Cx -> CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000734:	e005      	b.n	8000742 <I2C_GenerateStop+0x2c>
		I2Cx -> CR1 &= ~(I2C_CR1_STOP);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <I2C_GetFlagStatus>:


Flag_Status I2C_GetFlagStatus(I2C_TYPE_DEF* I2Cx, Status flag){
 800074c:	b480      	push	{r7}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	//volatile uint32_t dummyRead;
	uint32_t SR1Flag, SR2Flag, SR1_SR2_Flag;
	Flag_Status bitStatus = RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	75fb      	strb	r3, [r7, #23]

	switch(flag) {
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	2b05      	cmp	r3, #5
 8000760:	d865      	bhi.n	800082e <I2C_GetFlagStatus+0xe2>
 8000762:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <I2C_GetFlagStatus+0x1c>)
 8000764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000768:	08000781 	.word	0x08000781
 800076c:	08000799 	.word	0x08000799
 8000770:	080007b1 	.word	0x080007b1
 8000774:	08000817 	.word	0x08000817
 8000778:	080007c9 	.word	0x080007c9
 800077c:	080007ff 	.word	0x080007ff
	case I2C_FLAG_BUSY:
		if((I2Cx->SR2) & (I2C_SR2_BUSY)){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	2b00      	cmp	r3, #0
 800078a:	d002      	beq.n	8000792 <I2C_GetFlagStatus+0x46>
			bitStatus = SET;
 800078c:	2301      	movs	r3, #1
 800078e:	75fb      	strb	r3, [r7, #23]
		}else {
			bitStatus = RESET;
		}
		break;
 8000790:	e04d      	b.n	800082e <I2C_GetFlagStatus+0xe2>
			bitStatus = RESET;
 8000792:	2300      	movs	r3, #0
 8000794:	75fb      	strb	r3, [r7, #23]
		break;
 8000796:	e04a      	b.n	800082e <I2C_GetFlagStatus+0xe2>

	case EV5:
		if((I2Cx->SR1) & (I2C_SR1_SB)){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <I2C_GetFlagStatus+0x5e>
			bitStatus = SET;
 80007a4:	2301      	movs	r3, #1
 80007a6:	75fb      	strb	r3, [r7, #23]
		}else {
			bitStatus = RESET;
		}
		break;
 80007a8:	e041      	b.n	800082e <I2C_GetFlagStatus+0xe2>
			bitStatus = RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	75fb      	strb	r3, [r7, #23]
		break;
 80007ae:	e03e      	b.n	800082e <I2C_GetFlagStatus+0xe2>

	case EV6:
		if((I2Cx->SR1) & (I2C_SR1_ADDR)){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <I2C_GetFlagStatus+0x76>
			bitStatus = SET;
 80007bc:	2301      	movs	r3, #1
 80007be:	75fb      	strb	r3, [r7, #23]
		}else {
			bitStatus = RESET;
		}
		// To clear ADDr Field: cleard by reading SR1 Register followed by reading SR2.
		//dummyRead = I2Cx->SR2;
		break;
 80007c0:	e035      	b.n	800082e <I2C_GetFlagStatus+0xe2>
			bitStatus = RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	75fb      	strb	r3, [r7, #23]
		break;
 80007c6:	e032      	b.n	800082e <I2C_GetFlagStatus+0xe2>

	case MASTER_BYTE_TRANSMITTING:
		SR1Flag = I2Cx -> SR1;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	613b      	str	r3, [r7, #16]
		SR2Flag = I2Cx -> SR2;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	60fb      	str	r3, [r7, #12]
		SR2Flag = SR2Flag << 16;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	041b      	lsls	r3, r3, #16
 80007d8:	60fb      	str	r3, [r7, #12]

		SR1_SR2_Flag = (SR1Flag | SR2Flag) & ((uint32_t)0x00FFFFFF);
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4313      	orrs	r3, r2
 80007e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007e4:	60bb      	str	r3, [r7, #8]

		if((SR1_SR2_Flag & I2C_EVENT_MASTER_BYTE_TRANSMITTING) == I2C_EVENT_MASTER_BYTE_TRANSMITTING){
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <I2C_GetFlagStatus+0xf0>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	4a13      	ldr	r2, [pc, #76]	; (800083c <I2C_GetFlagStatus+0xf0>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d102      	bne.n	80007f8 <I2C_GetFlagStatus+0xac>
			bitStatus = SET;
 80007f2:	2301      	movs	r3, #1
 80007f4:	75fb      	strb	r3, [r7, #23]
		}else {
			bitStatus = RESET;
		}
		break;
 80007f6:	e01a      	b.n	800082e <I2C_GetFlagStatus+0xe2>
			bitStatus = RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	75fb      	strb	r3, [r7, #23]
		break;
 80007fc:	e017      	b.n	800082e <I2C_GetFlagStatus+0xe2>

	case EV8:
		if((I2Cx->SR1) & (I2C_SR1_TXE)){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <I2C_GetFlagStatus+0xc4>
			bitStatus = SET;
 800080a:	2301      	movs	r3, #1
 800080c:	75fb      	strb	r3, [r7, #23]
		}else {
			bitStatus = RESET;
		}
		break;
 800080e:	e00e      	b.n	800082e <I2C_GetFlagStatus+0xe2>
			bitStatus = RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	75fb      	strb	r3, [r7, #23]
		break;
 8000814:	e00b      	b.n	800082e <I2C_GetFlagStatus+0xe2>

	case EV7:
		if((I2Cx->SR1) & (I2C_SR1_RXNE)){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <I2C_GetFlagStatus+0xdc>
			bitStatus = SET;
 8000822:	2301      	movs	r3, #1
 8000824:	75fb      	strb	r3, [r7, #23]
		}else {
			bitStatus = RESET;
		}
		break;
 8000826:	e001      	b.n	800082c <I2C_GetFlagStatus+0xe0>
			bitStatus = RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	75fb      	strb	r3, [r7, #23]
		break;
 800082c:	bf00      	nop
	}


	return bitStatus;
 800082e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000830:	4618      	mov	r0, r3
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	00070080 	.word	0x00070080

08000840 <I2C_SendAddress>:

void I2C_SendAddress(I2C_TYPE_DEF* I2Cx, uint16_t address, I2C_Direction direction){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	807b      	strh	r3, [r7, #2]
 800084c:	4613      	mov	r3, r2
 800084e:	707b      	strb	r3, [r7, #1]
	address = address << 1;
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	807b      	strh	r3, [r7, #2]

	if(direction != WRITE){
 8000856:	787b      	ldrb	r3, [r7, #1]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d004      	beq.n	8000866 <I2C_SendAddress+0x26>
		address |= 1 << 0;
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	807b      	strh	r3, [r7, #2]
 8000864:	e003      	b.n	800086e <I2C_SendAddress+0x2e>
	}else {
		address &= ~(1 << 0);
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	f023 0301 	bic.w	r3, r3, #1
 800086c:	807b      	strh	r3, [r7, #2]
	}

	I2Cx->DR = address;
 800086e:	887a      	ldrh	r2, [r7, #2]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	611a      	str	r2, [r3, #16]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <I2C_ACKConfig>:

void I2C_ACKConfig(I2C_TYPE_DEF* I2Cx, Functional_State state){
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	460b      	mov	r3, r1
 8000888:	70fb      	strb	r3, [r7, #3]
	if(state == ENABLE){
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d106      	bne.n	800089e <I2C_ACKConfig+0x20>
		I2Cx -> CR1 |= (I2C_CR1_ACK);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	601a      	str	r2, [r3, #0]
	}else if(state == DISABLE){
		I2Cx -> CR1 &= ~(I2C_CR1_ACK);
	}
}
 800089c:	e008      	b.n	80008b0 <I2C_ACKConfig+0x32>
	}else if(state == DISABLE){
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d105      	bne.n	80008b0 <I2C_ACKConfig+0x32>
		I2Cx -> CR1 &= ~(I2C_CR1_ACK);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
	...

080008bc <MCAL_I2C_Init>:
/**************************************************************************/




void MCAL_I2C_Init(I2C_TYPE_DEF* I2Cx, I2C_Config_t* i2cCfg){
 80008bc:	b5b0      	push	{r4, r5, r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint16_t tempReg, freqRange, ccrVal;
	uint32_t pclk1 = 8000000;
 80008c6:	4b7a      	ldr	r3, [pc, #488]	; (8000ab0 <MCAL_I2C_Init+0x1f4>)
 80008c8:	617b      	str	r3, [r7, #20]

	if(I2Cx == I2C1){
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a79      	ldr	r2, [pc, #484]	; (8000ab4 <MCAL_I2C_Init+0x1f8>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d110      	bne.n	80008f4 <MCAL_I2C_Init+0x38>
		gI2CConfig[I2C1_INDEX] = *i2cCfg;
 80008d2:	4a79      	ldr	r2, [pc, #484]	; (8000ab8 <MCAL_I2C_Init+0x1fc>)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	4614      	mov	r4, r2
 80008d8:	461d      	mov	r5, r3
 80008da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e2:	682b      	ldr	r3, [r5, #0]
 80008e4:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 80008e6:	4b75      	ldr	r3, [pc, #468]	; (8000abc <MCAL_I2C_Init+0x200>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a74      	ldr	r2, [pc, #464]	; (8000abc <MCAL_I2C_Init+0x200>)
 80008ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	e014      	b.n	800091e <MCAL_I2C_Init+0x62>
	}else if(I2Cx == I2C2){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a72      	ldr	r2, [pc, #456]	; (8000ac0 <MCAL_I2C_Init+0x204>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d110      	bne.n	800091e <MCAL_I2C_Init+0x62>
		gI2CConfig[I2C2_INDEX] = *i2cCfg;
 80008fc:	4b6e      	ldr	r3, [pc, #440]	; (8000ab8 <MCAL_I2C_Init+0x1fc>)
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8000904:	4615      	mov	r5, r2
 8000906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090e:	682b      	ldr	r3, [r5, #0]
 8000910:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 8000912:	4b6a      	ldr	r3, [pc, #424]	; (8000abc <MCAL_I2C_Init+0x200>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a69      	ldr	r2, [pc, #420]	; (8000abc <MCAL_I2C_Init+0x200>)
 8000918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091c:	61d3      	str	r3, [r2, #28]
	}

	if(i2cCfg->mode == I2C_Mode_I2C){
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d17c      	bne.n	8000a20 <MCAL_I2C_Init+0x164>
		/*************** Configure Timing ********************/
		// CR2 - Bits 5:0 FREQ[5:0]: Peripheral clock frequency.
		tempReg = I2Cx->CR2;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	827b      	strh	r3, [r7, #18]
		// Clear Frequency FREQ[5:0] Bits.
		tempReg &= ~(I2C_CR2_FREQ_Msk);
 800092c:	8a7b      	ldrh	r3, [r7, #18]
 800092e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000932:	827b      	strh	r3, [r7, #18]
		// Get pclk1 Frequency Value.
		pclk1 = MCAL_RCC_GET_PCLK1Freq();
 8000934:	f000 fa28 	bl	8000d88 <MCAL_RCC_GET_PCLK1Freq>
 8000938:	6178      	str	r0, [r7, #20]
		// set Frequency bits depending on pclk1 value.
		freqRange = (uint16_t)(pclk1 / 1000000);
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	4a61      	ldr	r2, [pc, #388]	; (8000ac4 <MCAL_I2C_Init+0x208>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	0c9b      	lsrs	r3, r3, #18
 8000944:	823b      	strh	r3, [r7, #16]

		tempReg |= freqRange;
 8000946:	8a7a      	ldrh	r2, [r7, #18]
 8000948:	8a3b      	ldrh	r3, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	827b      	strh	r3, [r7, #18]

		I2Cx->CR2 = tempReg;
 800094e:	8a7a      	ldrh	r2, [r7, #18]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	605a      	str	r2, [r3, #4]

		// Configure clock Control Register (I2C_CCR).

		// Disable the selected I2C peripheral to configure time.
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f023 0201 	bic.w	r2, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	601a      	str	r2, [r3, #0]

		tempReg = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	827b      	strh	r3, [r7, #18]

		// Configure Speed in Standard Mode.
		if((i2cCfg -> clkSpeed) == I2C_SCLK_SM_50K || (i2cCfg -> clkSpeed) == I2C_SCLK_SM_100K){
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f24c 3250 	movw	r2, #50000	; 0xc350
 800096c:	4293      	cmp	r3, r2
 800096e:	d004      	beq.n	800097a <MCAL_I2C_Init+0xbe>
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a54      	ldr	r2, [pc, #336]	; (8000ac8 <MCAL_I2C_Init+0x20c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d112      	bne.n	80009a0 <MCAL_I2C_Init+0xe4>
			// Standard Mode Speed Calculations.
			ccrVal = (uint16_t)(pclk1 / ((i2cCfg -> clkSpeed) * 2));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	81fb      	strh	r3, [r7, #14]
			tempReg |= ccrVal;
 8000988:	8a7a      	ldrh	r2, [r7, #18]
 800098a:	89fb      	ldrh	r3, [r7, #14]
 800098c:	4313      	orrs	r3, r2
 800098e:	827b      	strh	r3, [r7, #18]

			I2Cx->CCR = tempReg;
 8000990:	8a7a      	ldrh	r2, [r7, #18]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	61da      	str	r2, [r3, #28]
			/* For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			 * If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			 * therefore the TRISE[5:0] bits must be programmed with 09h.
			 * (1000 ns / 125 ns = 8 + 1)
			 */
			I2Cx->TRISE = freqRange + 1;
 8000996:	8a3b      	ldrh	r3, [r7, #16]
 8000998:	3301      	adds	r3, #1
 800099a:	461a      	mov	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	621a      	str	r2, [r3, #32]
		}else {
			// Fast Mode Not Supported Yet
		}

		/*************** Configure CR1 ********************/
		tempReg = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	827b      	strh	r3, [r7, #18]
		tempReg = I2Cx->CR1;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	827b      	strh	r3, [r7, #18]
		tempReg |= (uint16_t)(i2cCfg->I2CACKControl | i2cCfg -> generalCall | i2cCfg -> mode | i2cCfg -> stretchMode);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	4313      	orrs	r3, r2
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	8a7b      	ldrh	r3, [r7, #18]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	827b      	strh	r3, [r7, #18]
		I2Cx->CR1 = tempReg;
 80009d4:	8a7a      	ldrh	r2, [r7, #18]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]

		/*************** Configure OAR1 & OAR2 ****************/

		tempReg = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	827b      	strh	r3, [r7, #18]
		if(i2cCfg->slaveAddCfg.dualAddEn == 1){
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	899b      	ldrh	r3, [r3, #12]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d108      	bne.n	80009f8 <MCAL_I2C_Init+0x13c>
			tempReg = I2C_OAR2_ENDUAL;
 80009e6:	2301      	movs	r3, #1
 80009e8:	827b      	strh	r3, [r7, #18]
			tempReg = i2cCfg->slaveAddCfg.secondarySlaveAdd << I2C_OAR2_ADD2_Pos;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	8a1b      	ldrh	r3, [r3, #16]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	827b      	strh	r3, [r7, #18]
			I2Cx->OAR2 = tempReg;
 80009f2:	8a7a      	ldrh	r2, [r7, #18]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	60da      	str	r2, [r3, #12]
		}

		tempReg = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	827b      	strh	r3, [r7, #18]
		tempReg |= i2cCfg->slaveAddCfg.primarySlaveAdd << 1;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	89db      	ldrh	r3, [r3, #14]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	b21a      	sxth	r2, r3
 8000a04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	827b      	strh	r3, [r7, #18]
		tempReg |= i2cCfg->slaveAddCfg.slaveAddressingMode;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	8a7b      	ldrh	r3, [r7, #18]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	827b      	strh	r3, [r7, #18]
		I2Cx->OAR1 = tempReg;
 8000a1a:	8a7a      	ldrh	r2, [r7, #18]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
	}else {
		// SMBUS Mode Is Not Supported.
	}

	// Interrupt Mode (Slave Mode) // check Callback Pointer != NULL
	if(i2cCfg->PSlaveEventCallBack != NULL){
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	6a1b      	ldr	r3, [r3, #32]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d038      	beq.n	8000a9a <MCAL_I2C_Init+0x1de>
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <MCAL_I2C_Init+0x1f8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d10c      	bne.n	8000a6e <MCAL_I2C_Init+0x1b2>
			NVIC_IRQ31_I2C1_EV_Enable;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MCAL_I2C_Init+0x210>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <MCAL_I2C_Init+0x210>)
 8000a5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5e:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MCAL_I2C_Init+0x214>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1a      	ldr	r2, [pc, #104]	; (8000ad0 <MCAL_I2C_Init+0x214>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e00f      	b.n	8000a8e <MCAL_I2C_Init+0x1d2>
		}else if(I2Cx == I2C2){
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <MCAL_I2C_Init+0x204>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d10b      	bne.n	8000a8e <MCAL_I2C_Init+0x1d2>
			NVIC_IRQ33_I2C2_EV_Enable;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MCAL_I2C_Init+0x214>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a15      	ldr	r2, [pc, #84]	; (8000ad0 <MCAL_I2C_Init+0x214>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MCAL_I2C_Init+0x214>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MCAL_I2C_Init+0x214>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6013      	str	r3, [r2, #0]
		}
		I2Cx -> SR1 = 0;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
		I2Cx -> SR2 = 0;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
	}

	// Enable Selected I2C peripheral.
	I2Cx->CR1 |= I2C_CR1_PE;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f043 0201 	orr.w	r2, r3, #1
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bdb0      	pop	{r4, r5, r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	007a1200 	.word	0x007a1200
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	20000070 	.word	0x20000070
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40005800 	.word	0x40005800
 8000ac4:	431bde83 	.word	0x431bde83
 8000ac8:	000186a0 	.word	0x000186a0
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000e104 	.word	0xe000e104

08000ad4 <MCAL_I2C_GPIO_SetPins>:
}




void MCAL_I2C_GPIO_SetPins(I2C_TYPE_DEF* I2Cx){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg;

	if(I2Cx == I2C1){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <MCAL_I2C_GPIO_SetPins+0x88>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d118      	bne.n	8000b16 <MCAL_I2C_GPIO_SetPins+0x42>
		// PB6: I2C1_SCL
		// PB7: I2C1_SDA
		pinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000aec:	2301      	movs	r3, #1
 8000aee:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	481a      	ldr	r0, [pc, #104]	; (8000b60 <MCAL_I2C_GPIO_SetPins+0x8c>)
 8000af8:	f7ff fd5b 	bl	80005b2 <MCAL_GPIO_Init>

		pinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000b00:	2307      	movs	r3, #7
 8000b02:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MCAL_I2C_GPIO_SetPins+0x8c>)
 8000b10:	f7ff fd4f 	bl	80005b2 <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOA, &pinCfg);
	}
}
 8000b14:	e01d      	b.n	8000b52 <MCAL_I2C_GPIO_SetPins+0x7e>
	}else if(I2Cx == I2C2){
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <MCAL_I2C_GPIO_SetPins+0x90>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d119      	bne.n	8000b52 <MCAL_I2C_GPIO_SetPins+0x7e>
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b22:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000b24:	2307      	movs	r3, #7
 8000b26:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	480b      	ldr	r0, [pc, #44]	; (8000b60 <MCAL_I2C_GPIO_SetPins+0x8c>)
 8000b34:	f7ff fd3d 	bl	80005b2 <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000b38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b3c:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MCAL_I2C_GPIO_SetPins+0x8c>)
 8000b4e:	f7ff fd30 	bl	80005b2 <MCAL_GPIO_Init>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	40010800 	.word	0x40010800
 8000b64:	40005800 	.word	0x40005800

08000b68 <MCAL_I2C_Master_TX>:



//Master APIs ( Polling Mechanism)
void MCAL_I2C_Master_TX(I2C_TYPE_DEF* I2Cx, uint16_t slaveAdd, uint8_t* dataOut, uint32_t dataLen, Stop_Condition stopState, Start_Condition startState){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	460b      	mov	r3, r1
 8000b76:	817b      	strh	r3, [r7, #10]
	int i;

	// 1.Set the start bit in the I2C.CR1 Reg to generate a start condition.
	I2C_GenerateStart(I2Cx, ENABLE, startState);
 8000b78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	2101      	movs	r1, #1
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff fda1 	bl	80006c8 <I2C_GenerateStart>
	 * 1: Start condition generated.
	 * – Set when a Start condition generated.
	 * – Cleared by software by reading the SR1 register followed by writing the DR register, or by
	 * hardware when PE=0
	 */
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000b86:	bf00      	nop
 8000b88:	2101      	movs	r1, #1
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff fdde 	bl	800074c <I2C_GetFlagStatus>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f8      	beq.n	8000b88 <MCAL_I2C_Master_TX+0x20>

	// 3. Send Slave Address.
	I2C_SendAddress(I2Cx, slaveAdd, WRITE);
 8000b96:	897b      	ldrh	r3, [r7, #10]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff fe4f 	bl	8000840 <I2C_SendAddress>
	 * 1: Received address matched.
	 * – Set by hardware as soon as the received slave address matched with the OAR registers
	 * content or a general call or a SMBus Device Default Address or SMBus Host or SMBus Alert
	 * is recognized. (when enabled depending on configuration).
	 */
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000ba2:	bf00      	nop
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff fdd0 	bl	800074c <I2C_GetFlagStatus>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f8      	beq.n	8000ba4 <MCAL_I2C_Master_TX+0x3c>

	// 5. Wait For Master Byte Transmitting Flags.
	// TRA, BUSY, MSL, TXE Flags .
	while(!I2C_GetFlagStatus(I2Cx, MASTER_BYTE_TRANSMITTING));
 8000bb2:	bf00      	nop
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff fdc8 	bl	800074c <I2C_GetFlagStatus>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f8      	beq.n	8000bb4 <MCAL_I2C_Master_TX+0x4c>

	for(i = 0; i < dataLen; i++){
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	e011      	b.n	8000bec <MCAL_I2C_Master_TX+0x84>
		// Write the DR register.
		I2Cx->DR = dataOut[i];
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
		// Wait for EV8.
		while(!I2C_GetFlagStatus(I2Cx, EV8));
 8000bd6:	bf00      	nop
 8000bd8:	2105      	movs	r1, #5
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff fdb6 	bl	800074c <I2C_GetFlagStatus>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f8      	beq.n	8000bd8 <MCAL_I2C_Master_TX+0x70>
	for(i = 0; i < dataLen; i++){
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8e9      	bhi.n	8000bc8 <MCAL_I2C_Master_TX+0x60>
	}

	// 6. Stop Conidtion.
	if(stopState == WITH_STOP){
 8000bf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d103      	bne.n	8000c04 <MCAL_I2C_Master_TX+0x9c>
		// Send Stop Condition.
		I2C_GenerateStop(I2Cx, ENABLE);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f7ff fd89 	bl	8000716 <I2C_GenerateStop>
	}
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <MCAL_I2C_Master_RX>:


void MCAL_I2C_Master_RX(I2C_TYPE_DEF* I2Cx, uint16_t slaveAdd, uint8_t* dataIn, uint32_t dataLen, Stop_Condition stopState, Start_Condition startState){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	817b      	strh	r3, [r7, #10]
	int i;
	uint8_t index = I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4a32      	ldr	r2, [pc, #200]	; (8000ce8 <MCAL_I2C_Master_RX+0xdc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	74fb      	strb	r3, [r7, #19]
	// 1.Set the start bit in the I2C.CR1 Reg to generate a start condition.
	I2C_GenerateStart(I2Cx, ENABLE, startState);
 8000c2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c30:	461a      	mov	r2, r3
 8000c32:	2101      	movs	r1, #1
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f7ff fd47 	bl	80006c8 <I2C_GenerateStart>
	 * 1: Start condition generated.
	 * – Set when a Start condition generated.
	 * – Cleared by software by reading the SR1 register followed by writing the DR register, or by
	 * hardware when PE=0
	 */
	while(!I2C_GetFlagStatus(I2Cx, EV5));
 8000c3a:	bf00      	nop
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f7ff fd84 	bl	800074c <I2C_GetFlagStatus>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f8      	beq.n	8000c3c <MCAL_I2C_Master_RX+0x30>

	// 3. Send Slave Address.
	I2C_SendAddress(I2Cx, slaveAdd, READ);
 8000c4a:	897b      	ldrh	r3, [r7, #10]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4619      	mov	r1, r3
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff fdf5 	bl	8000840 <I2C_SendAddress>
	 * 1: Received address matched.
	 * – Set by hardware as soon as the received slave address matched with the OAR registers
	 * content or a general call or a SMBus Device Default Address or SMBus Host or SMBus Alert
	 * is recognized. (when enabled depending on configuration).
	 */
	while(!I2C_GetFlagStatus(I2Cx, EV6));
 8000c56:	bf00      	nop
 8000c58:	2102      	movs	r1, #2
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fd76 	bl	800074c <I2C_GetFlagStatus>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f8      	beq.n	8000c58 <MCAL_I2C_Master_RX+0x4c>

	I2C_ACKConfig(I2Cx, ENABLE);
 8000c66:	2101      	movs	r1, #1
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f7ff fe08 	bl	800087e <I2C_ACKConfig>


	if(dataLen){
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d01c      	beq.n	8000cae <MCAL_I2C_Master_RX+0xa2>
		for(i = dataLen; i > 1; i--){
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	e012      	b.n	8000ca0 <MCAL_I2C_Master_RX+0x94>
			while(!I2C_GetFlagStatus(I2Cx, EV7));
 8000c7a:	bf00      	nop
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff fd64 	bl	800074c <I2C_GetFlagStatus>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f8      	beq.n	8000c7c <MCAL_I2C_Master_RX+0x70>
			*dataIn = I2Cx->DR;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	701a      	strb	r2, [r3, #0]
			dataIn++;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3301      	adds	r3, #1
 8000c98:	607b      	str	r3, [r7, #4]
		for(i = dataLen; i > 1; i--){
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	dce9      	bgt.n	8000c7a <MCAL_I2C_Master_RX+0x6e>
		}
		I2C_ACKConfig(I2Cx, DISABLE);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f7ff fde8 	bl	800087e <I2C_ACKConfig>
	}

	if(stopState == WITH_STOP){
 8000cae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d103      	bne.n	8000cbe <MCAL_I2C_Master_RX+0xb2>
		I2C_GenerateStop(I2Cx, ENABLE);
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f7ff fd2c 	bl	8000716 <I2C_GenerateStop>
	}

	if(gI2CConfig[index].I2CACKControl == I2C_ACK_EN){
 8000cbe:	7cfa      	ldrb	r2, [r7, #19]
 8000cc0:	490a      	ldr	r1, [pc, #40]	; (8000cec <MCAL_I2C_Master_RX+0xe0>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3318      	adds	r3, #24
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd4:	d103      	bne.n	8000cde <MCAL_I2C_Master_RX+0xd2>
		I2C_ACKConfig(I2Cx, ENABLE);
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	68f8      	ldr	r0, [r7, #12]
 8000cda:	f7ff fdd0 	bl	800087e <I2C_ACKConfig>
	}
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	20000070 	.word	0x20000070

08000cf0 <I2C1_EV_IRQHandler>:



/******************************** ISRs **********************************/

void I2C1_EV_IRQHandler(void){
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void){
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void){
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <MCAL_RCC_GET_SYS_CLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPreSCTable[17U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_GET_SYS_CLKFreq(void){
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >> 2 & 0b11){
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MCAL_RCC_GET_SYS_CLKFreq+0x30>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d006      	beq.n	8000d40 <MCAL_RCC_GET_SYS_CLKFreq+0x20>
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d302      	bcc.n	8000d3c <MCAL_RCC_GET_SYS_CLKFreq+0x1c>
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d004      	beq.n	8000d44 <MCAL_RCC_GET_SYS_CLKFreq+0x24>
 8000d3a:	e005      	b.n	8000d48 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
	case 0:
		return HSI_RC_CLK;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <MCAL_RCC_GET_SYS_CLKFreq+0x34>)
 8000d3e:	e003      	b.n	8000d48 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
		break;
	case 1:
		// ToDo and you need to calculate it.
		return HSE_CLK;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <MCAL_RCC_GET_SYS_CLKFreq+0x38>)
 8000d42:	e001      	b.n	8000d48 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
		break;
	case 2:
		// ToDo and you need to calculate it.
		return 16000000;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <MCAL_RCC_GET_SYS_CLKFreq+0x3c>)
 8000d46:	e7ff      	b.n	8000d48 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
		break;
	}
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000
 8000d54:	007a1200 	.word	0x007a1200
 8000d58:	00186a00 	.word	0x00186a00
 8000d5c:	00f42400 	.word	0x00f42400

08000d60 <MCAL_RCC_GET_HCLKFreq>:
uint32_t MCAL_RCC_GET_HCLKFreq(void){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYS_CLKFreq() >> (AHBPreSCTable[RCC->CFGR >> 4 & 0xF]));
 8000d64:	f7ff ffdc 	bl	8000d20 <MCAL_RCC_GET_SYS_CLKFreq>
 8000d68:	4601      	mov	r1, r0
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <MCAL_RCC_GET_HCLKFreq+0x20>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <MCAL_RCC_GET_HCLKFreq+0x24>)
 8000d76:	5cd3      	ldrb	r3, [r2, r3]
 8000d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000
 8000d84:	080010c8 	.word	0x080010c8

08000d88 <MCAL_RCC_GET_PCLK1Freq>:
uint32_t MCAL_RCC_GET_PCLK1Freq(void){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	// Bits 10:8  PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 8 & 0b111]));
 8000d8c:	f7ff ffe8 	bl	8000d60 <MCAL_RCC_GET_HCLKFreq>
 8000d90:	4601      	mov	r1, r0
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <MCAL_RCC_GET_PCLK1Freq+0x20>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	0a1b      	lsrs	r3, r3, #8
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	4a03      	ldr	r2, [pc, #12]	; (8000dac <MCAL_RCC_GET_PCLK1Freq+0x24>)
 8000d9e:	5cd3      	ldrb	r3, [r2, r3]
 8000da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40021000 	.word	0x40021000
 8000dac:	080010c0 	.word	0x080010c0

08000db0 <SPI1_IRQHandler>:

	// ------------------------------------------------------------------
	// IRQs
	// ------------------------------------------------------------------

	void SPI1_IRQHandler() {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irqSrc;
		irqSrc.TXE = ((SPI1->SR & ( 1 << 1)) >> 1);
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <SPI1_IRQHandler+0x54>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	793b      	ldrb	r3, [r7, #4]
 8000dc4:	f362 0300 	bfi	r3, r2, #0, #1
 8000dc8:	713b      	strb	r3, [r7, #4]
		irqSrc.RXNE = ((SPI1->SR & ( 1 << 0)) >> 0);
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <SPI1_IRQHandler+0x54>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	793b      	ldrb	r3, [r7, #4]
 8000dd6:	f362 0341 	bfi	r3, r2, #1, #1
 8000dda:	713b      	strb	r3, [r7, #4]
		irqSrc.ERRI = ((SPI1->SR & ( 1 << 4)) >> 4);
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <SPI1_IRQHandler+0x54>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	793b      	ldrb	r3, [r7, #4]
 8000dea:	f362 0382 	bfi	r3, r2, #2, #1
 8000dee:	713b      	strb	r3, [r7, #4]
		gSPIConfig[SPI1_INDEX]->P_IRQ_Callback(irqSrc);
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SPI1_IRQHandler+0x58>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	7938      	ldrb	r0, [r7, #4]
 8000df8:	4798      	blx	r3
	}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40013000 	.word	0x40013000
 8000e08:	20000020 	.word	0x20000020

08000e0c <SPI2_IRQHandler>:

	void SPI2_IRQHandler() {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
		struct S_IRQ_SRC irqSrc;
		irqSrc.TXE = ((SPI2->SR & ( 1 << 1)) >> 1);
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <SPI2_IRQHandler+0x54>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	085b      	lsrs	r3, r3, #1
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	793b      	ldrb	r3, [r7, #4]
 8000e20:	f362 0300 	bfi	r3, r2, #0, #1
 8000e24:	713b      	strb	r3, [r7, #4]
		irqSrc.RXNE = ((SPI2->SR & ( 1 << 0)) >> 0);
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <SPI2_IRQHandler+0x54>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	793b      	ldrb	r3, [r7, #4]
 8000e32:	f362 0341 	bfi	r3, r2, #1, #1
 8000e36:	713b      	strb	r3, [r7, #4]
		irqSrc.ERRI = ((SPI2->SR & ( 1 << 4)) >> 4);
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <SPI2_IRQHandler+0x54>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	793b      	ldrb	r3, [r7, #4]
 8000e46:	f362 0382 	bfi	r3, r2, #2, #1
 8000e4a:	713b      	strb	r3, [r7, #4]
		gSPIConfig[SPI2_INDEX]->P_IRQ_Callback(irqSrc);
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SPI2_IRQHandler+0x58>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	7938      	ldrb	r0, [r7, #4]
 8000e54:	4798      	blx	r3
	}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40003800 	.word	0x40003800
 8000e64:	20000020 	.word	0x20000020

08000e68 <TIM2_IRQHandler>:


// Timer ISR() Handler

// IRQ for delay Function with Timer2
void TIM2_IRQHandler(){
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(1 << 0); // Update Interrupt Flag
 8000e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e76:	f023 0301 	bic.w	r3, r3, #1
 8000e7a:	6113      	str	r3, [r2, #16]
	delayFlag = 0;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <TIM2_IRQHandler+0x34>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]

	TIM2->CR1 &= ~(1<<CEN);
 8000e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000000 	.word	0x20000000

08000ea0 <TIM1_UP_IRQHandler>:


void TIM1_UP_IRQHandler() {
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
        // Clear the update interrupt flag
        TIM1->SR &= ~(1 << 0);
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <TIM1_UP_IRQHandler+0x24>)
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <TIM1_UP_IRQHandler+0x24>)
 8000eaa:	f023 0301 	bic.w	r3, r3, #1
 8000eae:	6113      	str	r3, [r2, #16]
    	overflowTimsTIM1++;
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <TIM1_UP_IRQHandler+0x28>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <TIM1_UP_IRQHandler+0x28>)
 8000eba:	801a      	strh	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40012c00 	.word	0x40012c00
 8000ec8:	2000002c 	.word	0x2000002c

08000ecc <TIM3_IRQHandler>:


void TIM3_IRQHandler(){
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(1 << 0);
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <TIM3_IRQHandler+0x24>)
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <TIM3_IRQHandler+0x24>)
 8000ed6:	f023 0301 	bic.w	r3, r3, #1
 8000eda:	6113      	str	r3, [r2, #16]
	overflowTimsTIM3++;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <TIM3_IRQHandler+0x28>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <TIM3_IRQHandler+0x28>)
 8000ee6:	801a      	strh	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	2000002a 	.word	0x2000002a

08000ef8 <TIM4_IRQHandler>:
// IRQ for timeCalc function with Timer4.
void TIM4_IRQHandler(){
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	TIM4->SR &= ~(1 << 0);
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <TIM4_IRQHandler+0x24>)
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <TIM4_IRQHandler+0x24>)
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6113      	str	r3, [r2, #16]
	overflowTimsTIM4++;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <TIM4_IRQHandler+0x28>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <TIM4_IRQHandler+0x28>)
 8000f12:	801a      	strh	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	40000800 	.word	0x40000800
 8000f20:	20000028 	.word	0x20000028

08000f24 <USART1_IRQHandler>:




// ISR()
void USART1_IRQHandler(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	UARTGlobalCfg[0]->P_IRQ_Callback();
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <USART1_IRQHandler+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	4798      	blx	r3
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200000c0 	.word	0x200000c0

08000f38 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	UARTGlobalCfg[1]->P_IRQ_Callback();
 8000f3c:	4b02      	ldr	r3, [pc, #8]	; (8000f48 <USART2_IRQHandler+0x10>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	4798      	blx	r3
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200000c0 	.word	0x200000c0

08000f4c <USART3_IRQHandler>:

void USART3_IRQHandler(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	UARTGlobalCfg[2]->P_IRQ_Callback();
 8000f50:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <USART3_IRQHandler+0x10>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	4798      	blx	r3
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200000c0 	.word	0x200000c0

08000f60 <clockInit>:

uint16_t ch;


void clockInit()
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLk_EN();
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <clockInit+0x30>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <clockInit+0x30>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLk_EN();
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <clockInit+0x30>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <clockInit+0x30>)
 8000f76:	f043 0308 	orr.w	r3, r3, #8
 8000f7a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <clockInit+0x30>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <clockInit+0x30>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6193      	str	r3, [r2, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	40021000 	.word	0x40021000

08000f94 <main>:

int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t pinCfg;

	clockInit();
 8000f9a:	f7ff ffe1 	bl	8000f60 <clockInit>

	// Test Case 1:
	uint8_t ch1[] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7};
 8000f9e:	4a18      	ldr	r2, [pc, #96]	; (8001000 <main+0x6c>)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa6:	6018      	str	r0, [r3, #0]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	8019      	strh	r1, [r3, #0]
 8000fac:	3302      	adds	r3, #2
 8000fae:	0c0a      	lsrs	r2, r1, #16
 8000fb0:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[] = {0};
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	703b      	strb	r3, [r7, #0]

	EEPROM_Init();
 8000fb6:	f7ff f8db 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_NBytes(0xAF, ch1, 7);
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	20af      	movs	r0, #175	; 0xaf
 8000fc2:	f7ff f8f5 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xAF, ch2, 7);
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2207      	movs	r2, #7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	20af      	movs	r0, #175	; 0xaf
 8000fce:	f7ff f941 	bl	8000254 <EEPROM_Read_Byte>

	ch1[0] = 0xA;
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	713b      	strb	r3, [r7, #4]
	ch1[1] = 0xB;
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	717b      	strb	r3, [r7, #5]
	ch1[2] = 0xC;
 8000fda:	230c      	movs	r3, #12
 8000fdc:	71bb      	strb	r3, [r7, #6]
	ch1[3] = 0xD;
 8000fde:	230d      	movs	r3, #13
 8000fe0:	71fb      	strb	r3, [r7, #7]

	EEPROM_Write_NBytes(0xFFF, ch1, 4);
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000fec:	f7ff f8e0 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xFFF, ch2, 4);
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000ffa:	f7ff f92b 	bl	8000254 <EEPROM_Read_Byte>


	while (1){
 8000ffe:	e7fe      	b.n	8000ffe <main+0x6a>
 8001000:	080010b8 	.word	0x080010b8

08001004 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001006:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001008:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <LoopForever+0x6>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	; (8001044 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <LoopForever+0xe>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	; (8001050 <LoopForever+0x16>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001032:	f000 f811 	bl	8001058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001036:	f7ff ffad 	bl	8000f94 <main>

0800103a <LoopForever>:

LoopForever:
    b LoopForever
 800103a:	e7fe      	b.n	800103a <LoopForever>
  ldr   r0, =_estack
 800103c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001048:	080010e4 	.word	0x080010e4
  ldr r2, =_sbss
 800104c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001050:	200000cc 	.word	0x200000cc

08001054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC1_2_IRQHandler>
	...

08001058 <__libc_init_array>:
 8001058:	b570      	push	{r4, r5, r6, lr}
 800105a:	2500      	movs	r5, #0
 800105c:	4e0c      	ldr	r6, [pc, #48]	; (8001090 <__libc_init_array+0x38>)
 800105e:	4c0d      	ldr	r4, [pc, #52]	; (8001094 <__libc_init_array+0x3c>)
 8001060:	1ba4      	subs	r4, r4, r6
 8001062:	10a4      	asrs	r4, r4, #2
 8001064:	42a5      	cmp	r5, r4
 8001066:	d109      	bne.n	800107c <__libc_init_array+0x24>
 8001068:	f000 f81a 	bl	80010a0 <_init>
 800106c:	2500      	movs	r5, #0
 800106e:	4e0a      	ldr	r6, [pc, #40]	; (8001098 <__libc_init_array+0x40>)
 8001070:	4c0a      	ldr	r4, [pc, #40]	; (800109c <__libc_init_array+0x44>)
 8001072:	1ba4      	subs	r4, r4, r6
 8001074:	10a4      	asrs	r4, r4, #2
 8001076:	42a5      	cmp	r5, r4
 8001078:	d105      	bne.n	8001086 <__libc_init_array+0x2e>
 800107a:	bd70      	pop	{r4, r5, r6, pc}
 800107c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001080:	4798      	blx	r3
 8001082:	3501      	adds	r5, #1
 8001084:	e7ee      	b.n	8001064 <__libc_init_array+0xc>
 8001086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800108a:	4798      	blx	r3
 800108c:	3501      	adds	r5, #1
 800108e:	e7f2      	b.n	8001076 <__libc_init_array+0x1e>
 8001090:	080010dc 	.word	0x080010dc
 8001094:	080010dc 	.word	0x080010dc
 8001098:	080010dc 	.word	0x080010dc
 800109c:	080010e0 	.word	0x080010e0

080010a0 <_init>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	bf00      	nop
 80010a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a6:	bc08      	pop	{r3}
 80010a8:	469e      	mov	lr, r3
 80010aa:	4770      	bx	lr

080010ac <_fini>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	bf00      	nop
 80010b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b2:	bc08      	pop	{r3}
 80010b4:	469e      	mov	lr, r3
 80010b6:	4770      	bx	lr
