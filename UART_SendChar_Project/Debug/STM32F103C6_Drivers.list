
STM32F103C6_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a20  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000b50  08000b50  00010b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b6c  08000b6c  00010b74  2**0
                  CONTENTS
  4 .ARM          00000000  08000b6c  08000b6c  00010b74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b6c  08000b74  00010b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b6c  08000b6c  00010b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b70  08000b70  00010b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000b74  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000b74  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b74  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040cd  00000000  00000000  00010b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009d0  00000000  00000000  00014c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a84  00000000  00000000  0001563a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  000160c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00016290  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000da6  00000000  00000000  00016408  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000213b  00000000  00000000  000171ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009e75  00000000  00000000  000192e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002315e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000059c  00000000  00000000  000231dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b38 	.word	0x08000b38

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b38 	.word	0x08000b38

08000170 <EXTI0_IRQHandler>:
 * ===================================================================
 * 							ISR Functions
 * ===================================================================
 */

void EXTI0_IRQHandler(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	// Call IRQ_Callback.
	GP_IRQ_Callback[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5){
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= 1 << 5;
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[5]();
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 6){
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= 1 << 6;
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[6]();
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 7){
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= 1 << 7;
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[7]();
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 8){
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= 1 << 8;
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[8]();
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 9){
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= 1 << 9;
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[9]();
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10){
 80002d0:	4b35      	ldr	r3, [pc, #212]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |= 1 << 10;
 80002dc:	4b32      	ldr	r3, [pc, #200]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a31      	ldr	r2, [pc, #196]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 80002e8:	4b30      	ldr	r3, [pc, #192]	; (80003ac <EXTI15_10_IRQHandler+0xe0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 10){
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= 1 << 10;
 80002fa:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a2a      	ldr	r2, [pc, #168]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 8000300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000304:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[10]();
 8000306:	4b29      	ldr	r3, [pc, #164]	; (80003ac <EXTI15_10_IRQHandler+0xe0>)
 8000308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030a:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 11){
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= 1 << 11;
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 800031e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000322:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[11]();
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <EXTI15_10_IRQHandler+0xe0>)
 8000326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000328:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 12){
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= 1 << 12;
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 800033c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000340:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[12]();
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <EXTI15_10_IRQHandler+0xe0>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 13){
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= 1 << 13;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 800035a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800035e:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[13]();
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <EXTI15_10_IRQHandler+0xe0>)
 8000362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000364:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 14){
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= 1 << 14;
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 8000378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037c:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[14]();
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <EXTI15_10_IRQHandler+0xe0>)
 8000380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000382:	4798      	blx	r3
	}
	if(EXTI->PR & 1 << 15){
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800038c:	2b00      	cmp	r3, #0
 800038e:	d008      	beq.n	80003a2 <EXTI15_10_IRQHandler+0xd6>
		EXTI->PR |= 1 << 15;
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI15_10_IRQHandler+0xdc>)
 8000396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800039a:	6153      	str	r3, [r2, #20]
		GP_IRQ_Callback[15]();
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI15_10_IRQHandler+0xe0>)
 800039e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003a0:	4798      	blx	r3
	}
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <getCRLHPinPos>:
// Includes
// ------------------------------------------------------------------

#include "GPIO_Driver.h"

int getCRLHPinPos(uint16_t pinNum){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	80fb      	strh	r3, [r7, #6]
	switch(pinNum){
 80003ba:	88fb      	ldrh	r3, [r7, #6]
 80003bc:	2b80      	cmp	r3, #128	; 0x80
 80003be:	d042      	beq.n	8000446 <getCRLHPinPos+0x96>
 80003c0:	2b80      	cmp	r3, #128	; 0x80
 80003c2:	dc11      	bgt.n	80003e8 <getCRLHPinPos+0x38>
 80003c4:	2b08      	cmp	r3, #8
 80003c6:	d036      	beq.n	8000436 <getCRLHPinPos+0x86>
 80003c8:	2b08      	cmp	r3, #8
 80003ca:	dc06      	bgt.n	80003da <getCRLHPinPos+0x2a>
 80003cc:	2b02      	cmp	r3, #2
 80003ce:	d02e      	beq.n	800042e <getCRLHPinPos+0x7e>
 80003d0:	2b04      	cmp	r3, #4
 80003d2:	d02e      	beq.n	8000432 <getCRLHPinPos+0x82>
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d028      	beq.n	800042a <getCRLHPinPos+0x7a>
 80003d8:	e047      	b.n	800046a <getCRLHPinPos+0xba>
 80003da:	2b20      	cmp	r3, #32
 80003dc:	d02f      	beq.n	800043e <getCRLHPinPos+0x8e>
 80003de:	2b40      	cmp	r3, #64	; 0x40
 80003e0:	d02f      	beq.n	8000442 <getCRLHPinPos+0x92>
 80003e2:	2b10      	cmp	r3, #16
 80003e4:	d029      	beq.n	800043a <getCRLHPinPos+0x8a>
 80003e6:	e040      	b.n	800046a <getCRLHPinPos+0xba>
 80003e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003ec:	d033      	beq.n	8000456 <getCRLHPinPos+0xa6>
 80003ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003f2:	dc09      	bgt.n	8000408 <getCRLHPinPos+0x58>
 80003f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003f8:	d029      	beq.n	800044e <getCRLHPinPos+0x9e>
 80003fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003fe:	d028      	beq.n	8000452 <getCRLHPinPos+0xa2>
 8000400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000404:	d021      	beq.n	800044a <getCRLHPinPos+0x9a>
 8000406:	e030      	b.n	800046a <getCRLHPinPos+0xba>
 8000408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800040c:	d027      	beq.n	800045e <getCRLHPinPos+0xae>
 800040e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000412:	dc03      	bgt.n	800041c <getCRLHPinPos+0x6c>
 8000414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000418:	d01f      	beq.n	800045a <getCRLHPinPos+0xaa>
 800041a:	e026      	b.n	800046a <getCRLHPinPos+0xba>
 800041c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000420:	d01f      	beq.n	8000462 <getCRLHPinPos+0xb2>
 8000422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000426:	d01e      	beq.n	8000466 <getCRLHPinPos+0xb6>
 8000428:	e01f      	b.n	800046a <getCRLHPinPos+0xba>
	case (GPIO_PIN_0):
											return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e01e      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_1):
											return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e01c      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_2):
											return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e01a      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_3):
											return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e018      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_4):
											return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e016      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_5):
											return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e014      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_6):
											return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e012      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_7):
											return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e010      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_8):
											return 0;
 800044a:	2300      	movs	r3, #0
 800044c:	e00e      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_9):
											return 4;
 800044e:	2304      	movs	r3, #4
 8000450:	e00c      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_10):
											return 8;
 8000452:	2308      	movs	r3, #8
 8000454:	e00a      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_11):
											return 12;
 8000456:	230c      	movs	r3, #12
 8000458:	e008      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_12):
											return 16;
 800045a:	2310      	movs	r3, #16
 800045c:	e006      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_13):
											return 20;
 800045e:	2314      	movs	r3, #20
 8000460:	e004      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_14):
											return 24;
 8000462:	2318      	movs	r3, #24
 8000464:	e002      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	case (GPIO_PIN_15):
											return 28;
 8000466:	231c      	movs	r3, #28
 8000468:	e000      	b.n	800046c <getCRLHPinPos+0xbc>
	break;
	}

	return 0;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <MCAL_GPIO_Init>:
 * @retval 		- none
 * Note 		- STM32F103C6 MCU has GPIO A, B, C, D, E modules but LQFP48 package
 * 				  has only GPIO A, B, PART of C/D exported as external From the MCU.
 */

void MCAL_GPIO_Init(GPIO_TYPE_DEF* gpiox, GPIO_PinConfig_t* pinConfig){
 8000476:	b590      	push	{r4, r7, lr}
 8000478:	b085      	sub	sp, #20
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL), Configures pins from 0 >>> 7.
	// Port configuration register low (GPIOx_CRH), Configures pins from 8 >>> 15.

	volatile uint32_t* configReg = NULL;
 8000480:	2300      	movs	r3, #0
 8000482:	60bb      	str	r3, [r7, #8]
	uint8_t pin_CNF_MODE = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]

	// Configure if We are in CRL or CRH.
	configReg = (pinConfig->GPIO_PinNumber > GPIO_PIN_7) ? (&gpiox->CRH) : (&gpiox->CRL);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	2b80      	cmp	r3, #128	; 0x80
 800048e:	d902      	bls.n	8000496 <MCAL_GPIO_Init+0x20>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3304      	adds	r3, #4
 8000494:	e000      	b.n	8000498 <MCAL_GPIO_Init+0x22>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	60bb      	str	r3, [r7, #8]

	// Clear CNFy[1:0] MODEy[1:0];
	(*configReg) &= ~(0xf << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ff86 	bl	80003b0 <getCRLHPinPos>
 80004a4:	4602      	mov	r2, r0
 80004a6:	230f      	movs	r3, #15
 80004a8:	4093      	lsls	r3, r2
 80004aa:	43da      	mvns	r2, r3
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	401a      	ands	r2, r3
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	601a      	str	r2, [r3, #0]

	// If PIN Is OUPUT.
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD){
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	789b      	ldrb	r3, [r3, #2]
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d00b      	beq.n	80004d6 <MCAL_GPIO_Init+0x60>
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	789b      	ldrb	r3, [r3, #2]
 80004c2:	2b05      	cmp	r3, #5
 80004c4:	d007      	beq.n	80004d6 <MCAL_GPIO_Init+0x60>
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	789b      	ldrb	r3, [r3, #2]
 80004ca:	2b06      	cmp	r3, #6
 80004cc:	d003      	beq.n	80004d6 <MCAL_GPIO_Init+0x60>
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	789b      	ldrb	r3, [r3, #2]
 80004d2:	2b07      	cmp	r3, #7
 80004d4:	d10e      	bne.n	80004f4 <MCAL_GPIO_Init+0x7e>

		pin_CNF_MODE = ((pinConfig->GPIO_MODE - 4) << 2) | (pinConfig->GPIO_OUTPUT_SPEED & 0x0f);
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	3b04      	subs	r3, #4
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	78db      	ldrb	r3, [r3, #3]
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	f003 030f 	and.w	r3, r3, #15
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	4313      	orrs	r3, r2
 80004ee:	b25b      	sxtb	r3, r3
 80004f0:	73fb      	strb	r3, [r7, #15]
 80004f2:	e039      	b.n	8000568 <MCAL_GPIO_Init+0xf2>
	}
	// If PIN Is INPUT.
	else {	// MODE = 00: Input mode (reset state).
		if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinConfig->GPIO_MODE == GPIO_MODE_ANALOG){
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	789b      	ldrb	r3, [r3, #2]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d003      	beq.n	8000504 <MCAL_GPIO_Init+0x8e>
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	789b      	ldrb	r3, [r3, #2]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d10c      	bne.n	800051e <MCAL_GPIO_Init+0xa8>
			pin_CNF_MODE |= ((pinConfig->GPIO_MODE << 2)) & 0x0f;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	789b      	ldrb	r3, [r3, #2]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	b25b      	sxtb	r3, r3
 800050c:	f003 030f 	and.w	r3, r3, #15
 8000510:	b25a      	sxtb	r2, r3
 8000512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000516:	4313      	orrs	r3, r2
 8000518:	b25b      	sxtb	r3, r3
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e024      	b.n	8000568 <MCAL_GPIO_Init+0xf2>

		} else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF){
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	789b      	ldrb	r3, [r3, #2]
 8000522:	2b08      	cmp	r3, #8
 8000524:	d104      	bne.n	8000530 <MCAL_GPIO_Init+0xba>
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_FLO << 2)) & 0x0f;
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	73fb      	strb	r3, [r7, #15]
 800052e:	e01b      	b.n	8000568 <MCAL_GPIO_Init+0xf2>
		}else{
			pin_CNF_MODE |= ((GPIO_MODE_INPUT_PU << 2)) & 0x0f;
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	f043 0308 	orr.w	r3, r3, #8
 8000536:	73fb      	strb	r3, [r7, #15]

			// Table 20. Port bit configuration table PxODR configure if pull-up or down.
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU){
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	789b      	ldrb	r3, [r3, #2]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d107      	bne.n	8000550 <MCAL_GPIO_Init+0xda>
				gpiox->ODR |= pinConfig->GPIO_PinNumber;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	8812      	ldrh	r2, [r2, #0]
 8000548:	431a      	orrs	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	e00b      	b.n	8000568 <MCAL_GPIO_Init+0xf2>
			}else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD) {
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	789b      	ldrb	r3, [r3, #2]
 8000554:	2b03      	cmp	r3, #3
 8000556:	d107      	bne.n	8000568 <MCAL_GPIO_Init+0xf2>
				gpiox->ODR &= ~(pinConfig->GPIO_PinNumber);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	683a      	ldr	r2, [r7, #0]
 800055e:	8812      	ldrh	r2, [r2, #0]
 8000560:	43d2      	mvns	r2, r2
 8000562:	401a      	ands	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	60da      	str	r2, [r3, #12]
			}
		}


	}
	*configReg |= (pin_CNF_MODE << getCRLHPinPos(pinConfig->GPIO_PinNumber));
 8000568:	7bfc      	ldrb	r4, [r7, #15]
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ff1e 	bl	80003b0 <getCRLHPinPos>
 8000574:	4603      	mov	r3, r0
 8000576:	fa04 f203 	lsl.w	r2, r4, r3
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	431a      	orrs	r2, r3
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	601a      	str	r2, [r3, #0]

}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bd90      	pop	{r4, r7, pc}

0800058c <MCAL_RCC_GET_SYS_CLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPreSCTable[17U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

uint32_t MCAL_RCC_GET_SYS_CLKFreq(void){
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	switch(RCC->CFGR >> 2 & 0b11){
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <MCAL_RCC_GET_SYS_CLKFreq+0x30>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	089b      	lsrs	r3, r3, #2
 8000596:	f003 0303 	and.w	r3, r3, #3
 800059a:	2b01      	cmp	r3, #1
 800059c:	d006      	beq.n	80005ac <MCAL_RCC_GET_SYS_CLKFreq+0x20>
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d302      	bcc.n	80005a8 <MCAL_RCC_GET_SYS_CLKFreq+0x1c>
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d004      	beq.n	80005b0 <MCAL_RCC_GET_SYS_CLKFreq+0x24>
 80005a6:	e005      	b.n	80005b4 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
	case 0:
		return HSI_RC_CLK;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <MCAL_RCC_GET_SYS_CLKFreq+0x34>)
 80005aa:	e003      	b.n	80005b4 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
		break;
	case 1:
		// ToDo and you need to calculate it.
		return HSE_CLK;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <MCAL_RCC_GET_SYS_CLKFreq+0x38>)
 80005ae:	e001      	b.n	80005b4 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
		break;
	case 2:
		// ToDo and you need to calculate it.
		return 16000000;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <MCAL_RCC_GET_SYS_CLKFreq+0x3c>)
 80005b2:	e7ff      	b.n	80005b4 <MCAL_RCC_GET_SYS_CLKFreq+0x28>
		break;
	}
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000
 80005c0:	007a1200 	.word	0x007a1200
 80005c4:	00186a00 	.word	0x00186a00
 80005c8:	00f42400 	.word	0x00f42400

080005cc <MCAL_RCC_GET_HCLKFreq>:
uint32_t MCAL_RCC_GET_HCLKFreq(void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYS_CLKFreq() >> (AHBPreSCTable[RCC->CFGR >> 4 & 0xF]));
 80005d0:	f7ff ffdc 	bl	800058c <MCAL_RCC_GET_SYS_CLKFreq>
 80005d4:	4601      	mov	r1, r0
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <MCAL_RCC_GET_HCLKFreq+0x20>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	091b      	lsrs	r3, r3, #4
 80005dc:	f003 030f 	and.w	r3, r3, #15
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <MCAL_RCC_GET_HCLKFreq+0x24>)
 80005e2:	5cd3      	ldrb	r3, [r2, r3]
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	08000b58 	.word	0x08000b58

080005f4 <MCAL_RCC_GET_PCLK1Freq>:
uint32_t MCAL_RCC_GET_PCLK1Freq(void){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	// Bits 10:8  PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 8 & 0b111]));
 80005f8:	f7ff ffe8 	bl	80005cc <MCAL_RCC_GET_HCLKFreq>
 80005fc:	4601      	mov	r1, r0
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <MCAL_RCC_GET_PCLK1Freq+0x20>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	4a03      	ldr	r2, [pc, #12]	; (8000618 <MCAL_RCC_GET_PCLK1Freq+0x24>)
 800060a:	5cd3      	ldrb	r3, [r2, r3]
 800060c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	08000b50 	.word	0x08000b50

0800061c <MCAL_RCC_GET_PCLK2Freq>:
uint32_t MCAL_RCC_GET_PCLK2Freq(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	// Bits 13:11  PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GET_HCLKFreq() >> (APBPreSCTable[RCC->CFGR >> 11 & 0b111]));
 8000620:	f7ff ffd4 	bl	80005cc <MCAL_RCC_GET_HCLKFreq>
 8000624:	4601      	mov	r1, r0
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <MCAL_RCC_GET_PCLK2Freq+0x20>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	0adb      	lsrs	r3, r3, #11
 800062c:	f003 0307 	and.w	r3, r3, #7
 8000630:	4a03      	ldr	r2, [pc, #12]	; (8000640 <MCAL_RCC_GET_PCLK2Freq+0x24>)
 8000632:	5cd3      	ldrb	r3, [r2, r3]
 8000634:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000638:	4618      	mov	r0, r3
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	08000b50 	.word	0x08000b50

08000644 <MCAL_UART_Init>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Support for now Asynchronous mode & clock 8 MHZ.
 */

void MCAL_UART_Init(UART_TYPE_DEF* uartx, UART_Config_t* uartCfg){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]

	// Enable Clock for given uart peripheral.
	if(uartx == UART1){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a5b      	ldr	r2, [pc, #364]	; (80007c0 <MCAL_UART_Init+0x17c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d109      	bne.n	800066a <MCAL_UART_Init+0x26>
		UARTGlobalCfg[0] = uartCfg;
 8000656:	4a5b      	ldr	r2, [pc, #364]	; (80007c4 <MCAL_UART_Init+0x180>)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	6013      	str	r3, [r2, #0]
		RCC_UART1_CLk_EN();
 800065c:	4b5a      	ldr	r3, [pc, #360]	; (80007c8 <MCAL_UART_Init+0x184>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a59      	ldr	r2, [pc, #356]	; (80007c8 <MCAL_UART_Init+0x184>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	e01a      	b.n	80006a0 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART2){
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a57      	ldr	r2, [pc, #348]	; (80007cc <MCAL_UART_Init+0x188>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d109      	bne.n	8000686 <MCAL_UART_Init+0x42>
		UARTGlobalCfg[1] = uartCfg;
 8000672:	4a54      	ldr	r2, [pc, #336]	; (80007c4 <MCAL_UART_Init+0x180>)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	6053      	str	r3, [r2, #4]
		RCC_UART2_CLk_EN();
 8000678:	4b53      	ldr	r3, [pc, #332]	; (80007c8 <MCAL_UART_Init+0x184>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	4a52      	ldr	r2, [pc, #328]	; (80007c8 <MCAL_UART_Init+0x184>)
 800067e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000682:	61d3      	str	r3, [r2, #28]
 8000684:	e00c      	b.n	80006a0 <MCAL_UART_Init+0x5c>
	}
	else if(uartx == UART3){
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a51      	ldr	r2, [pc, #324]	; (80007d0 <MCAL_UART_Init+0x18c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d108      	bne.n	80006a0 <MCAL_UART_Init+0x5c>
		UARTGlobalCfg[2] = uartCfg;
 800068e:	4a4d      	ldr	r2, [pc, #308]	; (80007c4 <MCAL_UART_Init+0x180>)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	6093      	str	r3, [r2, #8]
		RCC_UART3_CLk_EN();
 8000694:	4b4c      	ldr	r3, [pc, #304]	; (80007c8 <MCAL_UART_Init+0x184>)
 8000696:	69db      	ldr	r3, [r3, #28]
 8000698:	4a4b      	ldr	r2, [pc, #300]	; (80007c8 <MCAL_UART_Init+0x184>)
 800069a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800069e:	61d3      	str	r3, [r2, #28]
	}

	// Enable UART Module
	uartx->CR1 |= 1 << 13;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60da      	str	r2, [r3, #12]

	// Enable UART tx and rx
	uartx->CR1 |= uartCfg->Mode;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	7812      	ldrb	r2, [r2, #0]
 80006b4:	431a      	orrs	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60da      	str	r2, [r3, #12]

	// Payload width
	uartx->CR1 |= uartCfg->Payload;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	7a12      	ldrb	r2, [r2, #8]
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	60da      	str	r2, [r3, #12]

	// Configuration of parity control bit fields.
	uartx->CR2 |= uartCfg->Parity;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	7a52      	ldrb	r2, [r2, #9]
 80006d0:	431a      	orrs	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	611a      	str	r2, [r3, #16]

	// configure number of stop bits
	uartx->CR2 |= uartCfg->StopBits;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	683a      	ldr	r2, [r7, #0]
 80006dc:	7a92      	ldrb	r2, [r2, #10]
 80006de:	431a      	orrs	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	611a      	str	r2, [r3, #16]

	// uart Hardware Flow Control.
	uartx->CR3 |= uartCfg->HwFlowCtl;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	7ad2      	ldrb	r2, [r2, #11]
 80006ec:	431a      	orrs	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	615a      	str	r2, [r3, #20]

	// Configuration of BRR.
	// PCLK1 for USART2, 3.
	// PCLK2 for USART1.

	if(uartx == UART1){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a32      	ldr	r2, [pc, #200]	; (80007c0 <MCAL_UART_Init+0x17c>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d105      	bne.n	8000706 <MCAL_UART_Init+0xc2>
		pclk = MCAL_RCC_GET_PCLK2Freq();
 80006fa:	f7ff ff8f 	bl	800061c <MCAL_RCC_GET_PCLK2Freq>
 80006fe:	4602      	mov	r2, r0
 8000700:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <MCAL_UART_Init+0x190>)
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	e004      	b.n	8000710 <MCAL_UART_Init+0xcc>
	}else {
		pclk = MCAL_RCC_GET_PCLK1Freq();
 8000706:	f7ff ff75 	bl	80005f4 <MCAL_RCC_GET_PCLK1Freq>
 800070a:	4602      	mov	r2, r0
 800070c:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <MCAL_UART_Init+0x190>)
 800070e:	601a      	str	r2, [r3, #0]
	}

	BRR = UART_BRR_REG(pclk, uartCfg->BaudRate);
 8000710:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <MCAL_UART_Init+0x190>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	091b      	lsrs	r3, r3, #4
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	6852      	ldr	r2, [r2, #4]
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	011a      	lsls	r2, r3, #4
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <MCAL_UART_Init+0x190>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	091b      	lsrs	r3, r3, #4
 8000726:	6839      	ldr	r1, [r7, #0]
 8000728:	6849      	ldr	r1, [r1, #4]
 800072a:	fb01 f303 	mul.w	r3, r1, r3
 800072e:	2164      	movs	r1, #100	; 0x64
 8000730:	fb01 f103 	mul.w	r1, r1, r3
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <MCAL_UART_Init+0x190>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	091b      	lsrs	r3, r3, #4
 800073a:	6838      	ldr	r0, [r7, #0]
 800073c:	6840      	ldr	r0, [r0, #4]
 800073e:	fb00 f303 	mul.w	r3, r0, r3
 8000742:	1acb      	subs	r3, r1, r3
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	4924      	ldr	r1, [pc, #144]	; (80007d8 <MCAL_UART_Init+0x194>)
 8000748:	fba1 1303 	umull	r1, r3, r1, r3
 800074c:	095b      	lsrs	r3, r3, #5
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	4313      	orrs	r3, r2
 8000754:	4a21      	ldr	r2, [pc, #132]	; (80007dc <MCAL_UART_Init+0x198>)
 8000756:	6013      	str	r3, [r2, #0]
	uartx->BRR = BRR;
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MCAL_UART_Init+0x198>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	609a      	str	r2, [r3, #8]

	// Enable / Disable Interrupt.
	if(uartCfg->IRQ_Enable != UART_IRQ_Eanble_NONE){
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	7b1b      	ldrb	r3, [r3, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d026      	beq.n	80007b6 <MCAL_UART_Init+0x172>
		uartx->CR1 |= (uartCfg->IRQ_Enable);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	683a      	ldr	r2, [r7, #0]
 800076e:	7b12      	ldrb	r2, [r2, #12]
 8000770:	431a      	orrs	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	60da      	str	r2, [r3, #12]
		// Enable NVIC for uartx IRQ.
		if(uartx == UART1){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <MCAL_UART_Init+0x17c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <MCAL_UART_Init+0x148>
			NVIC_IRQ37_UART1_Enable;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MCAL_UART_Init+0x19c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <MCAL_UART_Init+0x19c>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_UART2_Enable;
		}else if(uartx == UART3){
			NVIC_IRQ39_UART3_Enable;
		}
	}
}
 800078a:	e014      	b.n	80007b6 <MCAL_UART_Init+0x172>
		}else if(uartx == UART2){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <MCAL_UART_Init+0x188>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d106      	bne.n	80007a2 <MCAL_UART_Init+0x15e>
			NVIC_IRQ38_UART2_Enable;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MCAL_UART_Init+0x19c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MCAL_UART_Init+0x19c>)
 800079a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	e009      	b.n	80007b6 <MCAL_UART_Init+0x172>
		}else if(uartx == UART3){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <MCAL_UART_Init+0x18c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d105      	bne.n	80007b6 <MCAL_UART_Init+0x172>
			NVIC_IRQ39_UART3_Enable;
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MCAL_UART_Init+0x19c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <MCAL_UART_Init+0x19c>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6013      	str	r3, [r2, #0]
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40013800 	.word	0x40013800
 80007c4:	20000064 	.word	0x20000064
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40004400 	.word	0x40004400
 80007d0:	40014800 	.word	0x40014800
 80007d4:	20000060 	.word	0x20000060
 80007d8:	51eb851f 	.word	0x51eb851f
 80007dc:	2000005c 	.word	0x2000005c
 80007e0:	e000e104 	.word	0xe000e104

080007e4 <MCAL_UART_SendData>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- none
 */

void MCAL_UART_SendData	(UART_TYPE_DEF* uartx, uint16_t* pTxBuffer, enum Polling_Mechanism pollingEn){
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	4613      	mov	r3, r2
 80007f0:	71fb      	strb	r3, [r7, #7]

	// Wait until TXE flag is set in the SR.
	if(pollingEn == enable)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d106      	bne.n	8000806 <MCAL_UART_SendData+0x22>
		while(!(uartx->SR & 1 << 7));
 80007f8:	bf00      	nop
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0f9      	beq.n	80007fa <MCAL_UART_SendData+0x16>
	/* When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	because it is replaced by the parity.
	When receiving with the parity enabled, the value read in the MSB bit is the received parity
	bit.*/
	uint8_t payLoad = uartx == UART1 ? UARTGlobalCfg[0]->Payload : uartx == UART2 ? UARTGlobalCfg[1]->Payload : UARTGlobalCfg[2]->Payload;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <MCAL_UART_SendData+0x60>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d103      	bne.n	8000816 <MCAL_UART_SendData+0x32>
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MCAL_UART_SendData+0x64>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	7a1b      	ldrb	r3, [r3, #8]
 8000814:	e00a      	b.n	800082c <MCAL_UART_SendData+0x48>
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4a0c      	ldr	r2, [pc, #48]	; (800084c <MCAL_UART_SendData+0x68>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d103      	bne.n	8000826 <MCAL_UART_SendData+0x42>
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MCAL_UART_SendData+0x64>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	7a1b      	ldrb	r3, [r3, #8]
 8000824:	e002      	b.n	800082c <MCAL_UART_SendData+0x48>
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MCAL_UART_SendData+0x64>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	7a1b      	ldrb	r3, [r3, #8]
 800082c:	75fb      	strb	r3, [r7, #23]
	if(payLoad == UART_PayloadLength_9B){
		uartx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}else {
		uartx->DR = (*pTxBuffer & (uint8_t)0xFF);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	605a      	str	r2, [r3, #4]
	}
}
 8000838:	bf00      	nop
 800083a:	371c      	adds	r7, #28
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40013800 	.word	0x40013800
 8000848:	20000064 	.word	0x20000064
 800084c:	40004400 	.word	0x40004400

08000850 <MCAL_UART_ReceiveData>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- none
 */

void MCAL_UART_ReceiveData (UART_TYPE_DEF* uartx, uint16_t* pRxBuffer, enum Polling_Mechanism pollingEn){
 8000850:	b480      	push	{r7}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	4613      	mov	r3, r2
 800085c:	71fb      	strb	r3, [r7, #7]
	if(pollingEn == enable){
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d106      	bne.n	8000872 <MCAL_UART_ReceiveData+0x22>
		while (!(uartx->SR & 1 << 5));
 8000864:	bf00      	nop
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f003 0320 	and.w	r3, r3, #32
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f9      	beq.n	8000866 <MCAL_UART_ReceiveData+0x16>
	}

	uint8_t payLoad = uartx == UART1 ? UARTGlobalCfg[0]->Payload : uartx == UART2 ? UARTGlobalCfg[1]->Payload : UARTGlobalCfg[2]->Payload;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <MCAL_UART_ReceiveData+0xa4>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d103      	bne.n	8000882 <MCAL_UART_ReceiveData+0x32>
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MCAL_UART_ReceiveData+0xa8>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	7a1b      	ldrb	r3, [r3, #8]
 8000880:	e00a      	b.n	8000898 <MCAL_UART_ReceiveData+0x48>
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <MCAL_UART_ReceiveData+0xac>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d103      	bne.n	8000892 <MCAL_UART_ReceiveData+0x42>
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MCAL_UART_ReceiveData+0xa8>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	7a1b      	ldrb	r3, [r3, #8]
 8000890:	e002      	b.n	8000898 <MCAL_UART_ReceiveData+0x48>
 8000892:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MCAL_UART_ReceiveData+0xa8>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	7a1b      	ldrb	r3, [r3, #8]
 8000898:	75fb      	strb	r3, [r7, #23]
	uint8_t parity = uartx == UART1 ? UARTGlobalCfg[0]->Parity : uartx == UART2 ? UARTGlobalCfg[1]->Parity : UARTGlobalCfg[2]->Parity;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <MCAL_UART_ReceiveData+0xa4>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d103      	bne.n	80008aa <MCAL_UART_ReceiveData+0x5a>
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MCAL_UART_ReceiveData+0xa8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	7a5b      	ldrb	r3, [r3, #9]
 80008a8:	e00a      	b.n	80008c0 <MCAL_UART_ReceiveData+0x70>
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MCAL_UART_ReceiveData+0xac>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d103      	bne.n	80008ba <MCAL_UART_ReceiveData+0x6a>
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MCAL_UART_ReceiveData+0xa8>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	7a5b      	ldrb	r3, [r3, #9]
 80008b8:	e002      	b.n	80008c0 <MCAL_UART_ReceiveData+0x70>
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MCAL_UART_ReceiveData+0xa8>)
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	7a5b      	ldrb	r3, [r3, #9]
 80008c0:	75bb      	strb	r3, [r7, #22]
		if(parity == UART_Parity_NONE){
			*((uint16_t*) pRxBuffer) = uartx->DR;
		}else{
			*((uint16_t*) pRxBuffer) = (uartx->DR & (uint8_t)0xFF);
		}
	}else if (payLoad == UART_PayloadLength_8B){
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d110      	bne.n	80008ea <MCAL_UART_ReceiveData+0x9a>
		if(parity == UART_Parity_NONE){
 80008c8:	7dbb      	ldrb	r3, [r7, #22]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d105      	bne.n	80008da <MCAL_UART_ReceiveData+0x8a>
			*((uint16_t*) pRxBuffer) = uartx->DR;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	801a      	strh	r2, [r3, #0]
		}else{
			*((uint16_t*) pRxBuffer) = (uartx->DR & (uint8_t)0x7F);
		}
	}
}
 80008d8:	e007      	b.n	80008ea <MCAL_UART_ReceiveData+0x9a>
			*((uint16_t*) pRxBuffer) = (uartx->DR & (uint8_t)0x7F);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	801a      	strh	r2, [r3, #0]
}
 80008ea:	bf00      	nop
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40013800 	.word	0x40013800
 80008f8:	20000064 	.word	0x20000064
 80008fc:	40004400 	.word	0x40004400

08000900 <MCAL_UART_GPIO_SetPins>:
 * @param [out]	- none
 * @retval 		- none
 * Note 		- Those GPIO pins clock must be enabled after initialization.
 */

void MCAL_UART_GPIO_SetPins	(UART_TYPE_DEF* uartx){
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg;

	if(uartx == UART1){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a2b      	ldr	r2, [pc, #172]	; (80009b8 <MCAL_UART_GPIO_SetPins+0xb8>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d118      	bne.n	8000942 <MCAL_UART_GPIO_SetPins+0x42>
		// PA10 RX
		// PA11 CTS
		// PA12 RTS

		// PA9 TX
		pinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000914:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000916:	2306      	movs	r3, #6
 8000918:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4619      	mov	r1, r3
 8000924:	4825      	ldr	r0, [pc, #148]	; (80009bc <MCAL_UART_GPIO_SetPins+0xbc>)
 8000926:	f7ff fda6 	bl	8000476 <MCAL_GPIO_Init>

		// PA10 RX
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800092a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092e:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000930:	2308      	movs	r3, #8
 8000932:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	4820      	ldr	r0, [pc, #128]	; (80009bc <MCAL_UART_GPIO_SetPins+0xbc>)
 800093c:	f7ff fd9b 	bl	8000476 <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pinCfg);
		}
	}
}
 8000940:	e036      	b.n	80009b0 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART2){
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <MCAL_UART_GPIO_SetPins+0xc0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d116      	bne.n	8000978 <MCAL_UART_GPIO_SetPins+0x78>
		pinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800094a:	2304      	movs	r3, #4
 800094c:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800094e:	2306      	movs	r3, #6
 8000950:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000952:	2301      	movs	r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4619      	mov	r1, r3
 800095c:	4817      	ldr	r0, [pc, #92]	; (80009bc <MCAL_UART_GPIO_SetPins+0xbc>)
 800095e:	f7ff fd8a 	bl	8000476 <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000962:	2308      	movs	r3, #8
 8000964:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 8000966:	2308      	movs	r3, #8
 8000968:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	4619      	mov	r1, r3
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <MCAL_UART_GPIO_SetPins+0xbc>)
 8000972:	f7ff fd80 	bl	8000476 <MCAL_GPIO_Init>
}
 8000976:	e01b      	b.n	80009b0 <MCAL_UART_GPIO_SetPins+0xb0>
	}else if(uartx == UART3){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MCAL_UART_GPIO_SetPins+0xc4>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d117      	bne.n	80009b0 <MCAL_UART_GPIO_SetPins+0xb0>
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000984:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000986:	2306      	movs	r3, #6
 8000988:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800098a:	2301      	movs	r3, #1
 800098c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4619      	mov	r1, r3
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MCAL_UART_GPIO_SetPins+0xc8>)
 8000996:	f7ff fd6e 	bl	8000476 <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 800099a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800099e:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_INPUT_AF;
 80009a0:	2308      	movs	r3, #8
 80009a2:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <MCAL_UART_GPIO_SetPins+0xc8>)
 80009ac:	f7ff fd63 	bl	8000476 <MCAL_GPIO_Init>
}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40013800 	.word	0x40013800
 80009bc:	40010800 	.word	0x40010800
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40014800 	.word	0x40014800
 80009c8:	40010c00 	.word	0x40010c00

080009cc <USART1_IRQHandler>:




// ISR()
void USART1_IRQHandler(){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	UARTGlobalCfg[0]->P_IRQ_Callback();
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <USART1_IRQHandler+0x10>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	4798      	blx	r3
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000064 	.word	0x20000064

080009e0 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	UARTGlobalCfg[1]->P_IRQ_Callback();
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <USART2_IRQHandler+0x10>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	4798      	blx	r3
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000064 	.word	0x20000064

080009f4 <USART3_IRQHandler>:

void USART3_IRQHandler(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	UARTGlobalCfg[2]->P_IRQ_Callback();
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <USART3_IRQHandler+0x10>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	4798      	blx	r3
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000064 	.word	0x20000064

08000a08 <clockInit>:
#include "Keypad.h"
#include "RCC.h"
#include "UART.h"

void clockInit()
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLk_EN();
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <clockInit+0x30>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <clockInit+0x30>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLk_EN();
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <clockInit+0x30>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <clockInit+0x30>)
 8000a1e:	f043 0308 	orr.w	r3, r3, #8
 8000a22:	6193      	str	r3, [r2, #24]
	AFIO_CLK_EN();
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <clockInit+0x30>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <clockInit+0x30>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6193      	str	r3, [r2, #24]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000

08000a3c <main>:

int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
	uint16_t ch;
	UART_Config_t uartCfg;
	clockInit();
 8000a42:	f7ff ffe1 	bl	8000a08 <clockInit>
	uartCfg.BaudRate = UART_BaudRate_115200;
 8000a46:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a4a:	607b      	str	r3, [r7, #4]
	uartCfg.IRQ_Enable = UART_IRQ_Eanble_NONE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	733b      	strb	r3, [r7, #12]
	uartCfg.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	72fb      	strb	r3, [r7, #11]
	uartCfg.Parity = UART_Parity_NONE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	727b      	strb	r3, [r7, #9]
	uartCfg.Mode = UART_Mode_TX_RX;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	703b      	strb	r3, [r7, #0]
	uartCfg.Payload = UART_PayloadLength_8B;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	723b      	strb	r3, [r7, #8]
	uartCfg.StopBits = UART_StopBits_One;
 8000a60:	2300      	movs	r3, #0
 8000a62:	72bb      	strb	r3, [r7, #10]
	uartCfg.P_IRQ_Callback = NULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]

	MCAL_UART_Init(UART1, &uartCfg);
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <main+0x5c>)
 8000a6e:	f7ff fde9 	bl	8000644 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(UART1);
 8000a72:	4809      	ldr	r0, [pc, #36]	; (8000a98 <main+0x5c>)
 8000a74:	f7ff ff44 	bl	8000900 <MCAL_UART_GPIO_SetPins>
	while (1){
		MCAL_UART_SendData(UART1, &ch, enable);
 8000a78:	f107 0316 	add.w	r3, r7, #22
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <main+0x5c>)
 8000a82:	f7ff feaf 	bl	80007e4 <MCAL_UART_SendData>
		MCAL_UART_ReceiveData(UART1, &ch, enable);
 8000a86:	f107 0316 	add.w	r3, r7, #22
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4802      	ldr	r0, [pc, #8]	; (8000a98 <main+0x5c>)
 8000a90:	f7ff fede 	bl	8000850 <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(UART1, &ch, enable);
 8000a94:	e7f0      	b.n	8000a78 <main+0x3c>
 8000a96:	bf00      	nop
 8000a98:	40013800 	.word	0x40013800

08000a9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000aa0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	; (8000adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <LoopForever+0xe>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	; (8000ae8 <LoopForever+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aca:	f000 f811 	bl	8000af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ace:	f7ff ffb5 	bl	8000a3c <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   r0, =_estack
 8000ad4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ae0:	08000b74 	.word	0x08000b74
  ldr r2, =_sbss
 8000ae4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ae8:	20000070 	.word	0x20000070

08000aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_2_IRQHandler>
	...

08000af0 <__libc_init_array>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	2500      	movs	r5, #0
 8000af4:	4e0c      	ldr	r6, [pc, #48]	; (8000b28 <__libc_init_array+0x38>)
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__libc_init_array+0x3c>)
 8000af8:	1ba4      	subs	r4, r4, r6
 8000afa:	10a4      	asrs	r4, r4, #2
 8000afc:	42a5      	cmp	r5, r4
 8000afe:	d109      	bne.n	8000b14 <__libc_init_array+0x24>
 8000b00:	f000 f81a 	bl	8000b38 <_init>
 8000b04:	2500      	movs	r5, #0
 8000b06:	4e0a      	ldr	r6, [pc, #40]	; (8000b30 <__libc_init_array+0x40>)
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <__libc_init_array+0x44>)
 8000b0a:	1ba4      	subs	r4, r4, r6
 8000b0c:	10a4      	asrs	r4, r4, #2
 8000b0e:	42a5      	cmp	r5, r4
 8000b10:	d105      	bne.n	8000b1e <__libc_init_array+0x2e>
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
 8000b14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b18:	4798      	blx	r3
 8000b1a:	3501      	adds	r5, #1
 8000b1c:	e7ee      	b.n	8000afc <__libc_init_array+0xc>
 8000b1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b22:	4798      	blx	r3
 8000b24:	3501      	adds	r5, #1
 8000b26:	e7f2      	b.n	8000b0e <__libc_init_array+0x1e>
 8000b28:	08000b6c 	.word	0x08000b6c
 8000b2c:	08000b6c 	.word	0x08000b6c
 8000b30:	08000b6c 	.word	0x08000b6c
 8000b34:	08000b70 	.word	0x08000b70

08000b38 <_init>:
 8000b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3a:	bf00      	nop
 8000b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3e:	bc08      	pop	{r3}
 8000b40:	469e      	mov	lr, r3
 8000b42:	4770      	bx	lr

08000b44 <_fini>:
 8000b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b46:	bf00      	nop
 8000b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4a:	bc08      	pop	{r3}
 8000b4c:	469e      	mov	lr, r3
 8000b4e:	4770      	bx	lr
